// Code generated by MockGen. DO NOT EDIT.
// Source: auth_micro/server/sessionrepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	auth_config "github.com/go-park-mail-ru/2025_1_ProVVeb/auth_micro/config"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CheckAttempts mocks base method.
func (m *MockSessionRepository) CheckAttempts(userIP string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAttempts", userIP)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAttempts indicates an expected call of CheckAttempts.
func (mr *MockSessionRepositoryMockRecorder) CheckAttempts(userIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAttempts", reflect.TypeOf((*MockSessionRepository)(nil).CheckAttempts), userIP)
}

// CloseRepo mocks base method.
func (m *MockSessionRepository) CloseRepo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRepo")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRepo indicates an expected call of CloseRepo.
func (mr *MockSessionRepositoryMockRecorder) CloseRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRepo", reflect.TypeOf((*MockSessionRepository)(nil).CloseRepo))
}

// CreateSession mocks base method.
func (m *MockSessionRepository) CreateSession(userId int) auth_config.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", userId)
	ret0, _ := ret[0].(auth_config.Session)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionRepositoryMockRecorder) CreateSession(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRepository)(nil).CreateSession), userId)
}

// DeleteAllSessions mocks base method.
func (m *MockSessionRepository) DeleteAllSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllSessions indicates an expected call of DeleteAllSessions.
func (mr *MockSessionRepositoryMockRecorder) DeleteAllSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSessions", reflect.TypeOf((*MockSessionRepository)(nil).DeleteAllSessions))
}

// DeleteAttempts mocks base method.
func (m *MockSessionRepository) DeleteAttempts(userIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttempts", userIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttempts indicates an expected call of DeleteAttempts.
func (mr *MockSessionRepositoryMockRecorder) DeleteAttempts(userIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttempts", reflect.TypeOf((*MockSessionRepository)(nil).DeleteAttempts), userIP)
}

// DeleteSession mocks base method.
func (m *MockSessionRepository) DeleteSession(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionRepositoryMockRecorder) DeleteSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionRepository)(nil).DeleteSession), sessionId)
}

// GetSession mocks base method.
func (m *MockSessionRepository) GetSession(sessionId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", sessionId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionRepositoryMockRecorder) GetSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionRepository)(nil).GetSession), sessionId)
}

// IncreaseAttempts mocks base method.
func (m *MockSessionRepository) IncreaseAttempts(userIP string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseAttempts", userIP)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseAttempts indicates an expected call of IncreaseAttempts.
func (mr *MockSessionRepositoryMockRecorder) IncreaseAttempts(userIP interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAttempts", reflect.TypeOf((*MockSessionRepository)(nil).IncreaseAttempts), userIP)
}

// StoreSession mocks base method.
func (m *MockSessionRepository) StoreSession(sessionId, data string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSession", sessionId, data, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSession indicates an expected call of StoreSession.
func (mr *MockSessionRepositoryMockRecorder) StoreSession(sessionId, data, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSession", reflect.TypeOf((*MockSessionRepository)(nil).StoreSession), sessionId, data, ttl)
}
