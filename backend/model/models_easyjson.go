// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel(in *jlexer.Lexer, out *WSMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "payload":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Payload).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel(out *jwriter.Writer, in WSMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.Raw((in.Payload).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WSMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WSMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WSMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WSMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel1(in *jlexer.Lexer, out *UsersForQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "minScore":
			out.MinScore = int(in.Int())
		case "maxScore":
			out.MaxScore = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		case "score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel1(out *jwriter.Writer, in UsersForQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"minScore\":"
		out.RawString(prefix)
		out.Int(int(in.MinScore))
	}
	{
		const prefix string = ",\"maxScore\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScore))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersForQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersForQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersForQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersForQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel1(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel2(in *jlexer.Lexer, out *UserAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "score":
			out.Score = int32(in.Int32())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel2(out *jwriter.Writer, in UserAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int32(int32(in.Score))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel2(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserId = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel3(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel4(in *jlexer.Lexer, out *UploadResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "sucessful_uploads":
			if in.IsNull() {
				in.Skip()
				out.SucessfulUploads = nil
			} else {
				in.Delim('[')
				if out.SucessfulUploads == nil {
					if !in.IsDelim(']') {
						out.SucessfulUploads = make([]string, 0, 4)
					} else {
						out.SucessfulUploads = []string{}
					}
				} else {
					out.SucessfulUploads = (out.SucessfulUploads)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.SucessfulUploads = append(out.SucessfulUploads, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel4(out *jwriter.Writer, in UploadResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"sucessful_uploads\":"
		out.RawString(prefix)
		if in.SucessfulUploads == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.SucessfulUploads {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UploadResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UploadResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UploadResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UploadResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel4(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel5(in *jlexer.Lexer, out *TimeConstraints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeFrom).UnmarshalJSON(data))
			}
		case "time_to":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeTo).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel5(out *jwriter.Writer, in TimeConstraints) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_from\":"
		out.RawString(prefix[1:])
		out.Raw((in.TimeFrom).MarshalJSON())
	}
	{
		const prefix string = ",\"time_to\":"
		out.RawString(prefix)
		out.Raw((in.TimeTo).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeConstraints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeConstraints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeConstraints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeConstraints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel5(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel6(in *jlexer.Lexer, out *SignUpRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel6(out *jwriter.Writer, in SignUpRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUpRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUpRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUpRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUpRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel6(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel7(in *jlexer.Lexer, out *SetLike) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "likeFrom":
			out.LikeFrom = int(in.Int())
		case "likeTo":
			out.LikeTo = int(in.Int())
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel7(out *jwriter.Writer, in SetLike) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"likeFrom\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LikeFrom))
	}
	{
		const prefix string = ",\"likeTo\":"
		out.RawString(prefix)
		out.Int(int(in.LikeTo))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SetLike) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SetLike) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SetLike) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SetLike) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel7(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel8(in *jlexer.Lexer, out *SessionCheckSuccessResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "inSession":
			out.InSession = bool(in.Bool())
		case "id":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel8(out *jwriter.Writer, in SessionCheckSuccessResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"inSession\":"
		out.RawString(prefix)
		out.Bool(bool(in.InSession))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionCheckSuccessResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionCheckSuccessResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionCheckSuccessResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionCheckSuccessResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel8(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel9(in *jlexer.Lexer, out *SessionCheckResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "inSession":
			out.InSession = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel9(out *jwriter.Writer, in SessionCheckResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"inSession\":"
		out.RawString(prefix)
		out.Bool(bool(in.InSession))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SessionCheckResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SessionCheckResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SessionCheckResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SessionCheckResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel9(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel10(in *jlexer.Lexer, out *Session) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sessionId":
			out.SessionId = string(in.String())
		case "userId":
			out.UserId = int(in.Int())
		case "expires":
			out.Expires = time.Duration(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel10(out *jwriter.Writer, in Session) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sessionId\":"
		out.RawString(prefix[1:])
		out.String(string(in.SessionId))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		out.Int64(int64(in.Expires))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Session) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Session) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Session) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Session) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel10(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel11(in *jlexer.Lexer, out *SearchProfileRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "input":
			out.Input = string(in.String())
		case "isMale":
			out.IsMale = string(in.String())
		case "ageMin":
			out.AgeMin = int(in.Int())
		case "ageMax":
			out.AgeMax = int(in.Int())
		case "heightMin":
			out.HeightMin = int(in.Int())
		case "heightMax":
			out.HeightMax = int(in.Int())
		case "goal":
			out.Goal = int(in.Int())
		case "preferences":
			if in.IsNull() {
				in.Skip()
				out.Preferences = nil
			} else {
				in.Delim('[')
				if out.Preferences == nil {
					if !in.IsDelim(']') {
						out.Preferences = make([]Preference, 0, 2)
					} else {
						out.Preferences = []Preference{}
					}
				} else {
					out.Preferences = (out.Preferences)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Preference
					(v4).UnmarshalEasyJSON(in)
					out.Preferences = append(out.Preferences, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel11(out *jwriter.Writer, in SearchProfileRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"input\":"
		out.RawString(prefix[1:])
		out.String(string(in.Input))
	}
	{
		const prefix string = ",\"isMale\":"
		out.RawString(prefix)
		out.String(string(in.IsMale))
	}
	{
		const prefix string = ",\"ageMin\":"
		out.RawString(prefix)
		out.Int(int(in.AgeMin))
	}
	{
		const prefix string = ",\"ageMax\":"
		out.RawString(prefix)
		out.Int(int(in.AgeMax))
	}
	{
		const prefix string = ",\"heightMin\":"
		out.RawString(prefix)
		out.Int(int(in.HeightMin))
	}
	{
		const prefix string = ",\"heightMax\":"
		out.RawString(prefix)
		out.Int(int(in.HeightMax))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.Int(int(in.Goal))
	}
	{
		const prefix string = ",\"preferences\":"
		out.RawString(prefix)
		if in.Preferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Preferences {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchProfileRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchProfileRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchProfileRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchProfileRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel11(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel12(in *jlexer.Lexer, out *ReadPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel12(out *jwriter.Writer, in ReadPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel12(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel13(in *jlexer.Lexer, out *ReadNotifPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notif_type":
			out.NotifType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel13(out *jwriter.Writer, in ReadNotifPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notif_type\":"
		out.RawString(prefix[1:])
		out.String(string(in.NotifType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadNotifPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadNotifPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadNotifPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadNotifPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel13(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel14(in *jlexer.Lexer, out *RawTimeConstraints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_from":
			if in.IsNull() {
				in.Skip()
				out.TimeFrom = nil
			} else {
				if out.TimeFrom == nil {
					out.TimeFrom = new(string)
				}
				*out.TimeFrom = string(in.String())
			}
		case "time_to":
			if in.IsNull() {
				in.Skip()
				out.TimeTo = nil
			} else {
				if out.TimeTo == nil {
					out.TimeTo = new(string)
				}
				*out.TimeTo = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel14(out *jwriter.Writer, in RawTimeConstraints) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_from\":"
		out.RawString(prefix[1:])
		if in.TimeFrom == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TimeFrom))
		}
	}
	{
		const prefix string = ",\"time_to\":"
		out.RawString(prefix)
		if in.TimeTo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.TimeTo))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawTimeConstraints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawTimeConstraints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawTimeConstraints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawTimeConstraints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel14(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel15(in *jlexer.Lexer, out *QueryStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "TotalAnswers":
			out.TotalAnswers = int(in.Int())
		case "AverageScore":
			out.AverageScore = float64(in.Float64())
		case "MinScore":
			out.MinScore = int(in.Int())
		case "MaxScore":
			out.MaxScore = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel15(out *jwriter.Writer, in QueryStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"TotalAnswers\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalAnswers))
	}
	{
		const prefix string = ",\"AverageScore\":"
		out.RawString(prefix)
		out.Float64(float64(in.AverageScore))
	}
	{
		const prefix string = ",\"MinScore\":"
		out.RawString(prefix)
		out.Int(int(in.MinScore))
	}
	{
		const prefix string = ",\"MaxScore\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScore))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel15(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel16(in *jlexer.Lexer, out *QueryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "queryis":
			if in.IsNull() {
				in.Skip()
				out.Queries = nil
			} else {
				in.Delim('[')
				if out.Queries == nil {
					if !in.IsDelim(']') {
						out.Queries = make([]QueryForUser, 0, 0)
					} else {
						out.Queries = []QueryForUser{}
					}
				} else {
					out.Queries = (out.Queries)[:0]
				}
				for !in.IsDelim(']') {
					var v7 QueryForUser
					(v7).UnmarshalEasyJSON(in)
					out.Queries = append(out.Queries, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel16(out *jwriter.Writer, in QueryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"queryis\":"
		out.RawString(prefix[1:])
		if in.Queries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Queries {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel16(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel17(in *jlexer.Lexer, out *QueryForUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "minScore":
			out.MinScore = int(in.Int())
		case "maxScore":
			out.MaxScore = int(in.Int())
		case "score":
			out.Score = int(in.Int())
		case "answer":
			out.Answer = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel17(out *jwriter.Writer, in QueryForUser) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"minScore\":"
		out.RawString(prefix)
		out.Int(int(in.MinScore))
	}
	{
		const prefix string = ",\"maxScore\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScore))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QueryForUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QueryForUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QueryForUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QueryForUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel17(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel18(in *jlexer.Lexer, out *Query) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "minScore":
			out.MinScore = int(in.Int())
		case "maxScore":
			out.MaxScore = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel18(out *jwriter.Writer, in Query) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"minScore\":"
		out.RawString(prefix)
		out.Int(int(in.MinScore))
	}
	{
		const prefix string = ",\"maxScore\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScore))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Query) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Query) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Query) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Query) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel18(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel19(in *jlexer.Lexer, out *QuerResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "queryis":
			if in.IsNull() {
				in.Skip()
				out.Queries = nil
			} else {
				in.Delim('[')
				if out.Queries == nil {
					if !in.IsDelim(']') {
						out.Queries = make([]Query, 0, 1)
					} else {
						out.Queries = []Query{}
					}
				} else {
					out.Queries = (out.Queries)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Query
					(v10).UnmarshalEasyJSON(in)
					out.Queries = append(out.Queries, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel19(out *jwriter.Writer, in QuerResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"queryis\":"
		out.RawString(prefix[1:])
		if in.Queries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Queries {
				if v11 > 0 {
					out.RawByte(',')
				}
				(v12).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuerResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuerResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuerResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuerResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel19(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel20(in *jlexer.Lexer, out *ProfileStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "likesGiven":
			out.LikesGiven = int(in.Int())
		case "likesReceived":
			out.LikesReceived = int(in.Int())
		case "matches":
			out.Matches = int(in.Int())
		case "complaintsMade":
			out.ComplaintsMade = int(in.Int())
		case "complaintsReceived":
			out.ComplaintsReceived = int(in.Int())
		case "messagesSent":
			out.MessagesSent = int(in.Int())
		case "chatCount":
			out.ChatCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel20(out *jwriter.Writer, in ProfileStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"likesGiven\":"
		out.RawString(prefix[1:])
		out.Int(int(in.LikesGiven))
	}
	{
		const prefix string = ",\"likesReceived\":"
		out.RawString(prefix)
		out.Int(int(in.LikesReceived))
	}
	{
		const prefix string = ",\"matches\":"
		out.RawString(prefix)
		out.Int(int(in.Matches))
	}
	{
		const prefix string = ",\"complaintsMade\":"
		out.RawString(prefix)
		out.Int(int(in.ComplaintsMade))
	}
	{
		const prefix string = ",\"complaintsReceived\":"
		out.RawString(prefix)
		out.Int(int(in.ComplaintsReceived))
	}
	{
		const prefix string = ",\"messagesSent\":"
		out.RawString(prefix)
		out.Int(int(in.MessagesSent))
	}
	{
		const prefix string = ",\"chatCount\":"
		out.RawString(prefix)
		out.Int(int(in.ChatCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel20(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel21(in *jlexer.Lexer, out *ProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]Profile, 0, 0)
					} else {
						out.Profiles = []Profile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Profile
					(v13).UnmarshalEasyJSON(in)
					out.Profiles = append(out.Profiles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel21(out *jwriter.Writer, in ProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix[1:])
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Profiles {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel21(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel22(in *jlexer.Lexer, out *ProfileIsAdmin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profileId":
			out.ProfileId = int(in.Int())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "isMale":
			out.IsMale = bool(in.Bool())
		case "goal":
			out.Goal = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Interests = append(out.Interests, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likedBy":
			if in.IsNull() {
				in.Skip()
				out.LikedBy = nil
			} else {
				in.Delim('[')
				if out.LikedBy == nil {
					if !in.IsDelim(']') {
						out.LikedBy = make([]int, 0, 8)
					} else {
						out.LikedBy = []int{}
					}
				} else {
					out.LikedBy = (out.LikedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v17 int
					v17 = int(in.Int())
					out.LikedBy = append(out.LikedBy, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferences":
			if in.IsNull() {
				in.Skip()
				out.Preferences = nil
			} else {
				in.Delim('[')
				if out.Preferences == nil {
					if !in.IsDelim(']') {
						out.Preferences = make([]Preference, 0, 2)
					} else {
						out.Preferences = []Preference{}
					}
				} else {
					out.Preferences = (out.Preferences)[:0]
				}
				for !in.IsDelim(']') {
					var v18 Preference
					(v18).UnmarshalEasyJSON(in)
					out.Preferences = append(out.Preferences, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Preference, 0, 2)
					} else {
						out.Parameters = []Preference{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Preference
					(v19).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.Photos = append(out.Photos, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Premium":
			(out.Premium).UnmarshalEasyJSON(in)
		case "isAdmin":
			out.IsAdmin = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel22(out *jwriter.Writer, in ProfileIsAdmin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profileId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ProfileId))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"isMale\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMale))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.Int(int(in.Goal))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Interests {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likedBy\":"
		out.RawString(prefix)
		if in.LikedBy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.LikedBy {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v24))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"preferences\":"
		out.RawString(prefix)
		if in.Preferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Preferences {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Parameters {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Photos {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Premium\":"
		out.RawString(prefix)
		(in.Premium).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"isAdmin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProfileIsAdmin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProfileIsAdmin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProfileIsAdmin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProfileIsAdmin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel22(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel23(in *jlexer.Lexer, out *Profile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profileId":
			out.ProfileId = int(in.Int())
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.LastName = string(in.String())
		case "isMale":
			out.IsMale = bool(in.Bool())
		case "goal":
			out.Goal = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "birthday":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Birthday).UnmarshalJSON(data))
			}
		case "description":
			out.Description = string(in.String())
		case "location":
			out.Location = string(in.String())
		case "interests":
			if in.IsNull() {
				in.Skip()
				out.Interests = nil
			} else {
				in.Delim('[')
				if out.Interests == nil {
					if !in.IsDelim(']') {
						out.Interests = make([]string, 0, 4)
					} else {
						out.Interests = []string{}
					}
				} else {
					out.Interests = (out.Interests)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Interests = append(out.Interests, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likedBy":
			if in.IsNull() {
				in.Skip()
				out.LikedBy = nil
			} else {
				in.Delim('[')
				if out.LikedBy == nil {
					if !in.IsDelim(']') {
						out.LikedBy = make([]int, 0, 8)
					} else {
						out.LikedBy = []int{}
					}
				} else {
					out.LikedBy = (out.LikedBy)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int
					v32 = int(in.Int())
					out.LikedBy = append(out.LikedBy, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferences":
			if in.IsNull() {
				in.Skip()
				out.Preferences = nil
			} else {
				in.Delim('[')
				if out.Preferences == nil {
					if !in.IsDelim(']') {
						out.Preferences = make([]Preference, 0, 2)
					} else {
						out.Preferences = []Preference{}
					}
				} else {
					out.Preferences = (out.Preferences)[:0]
				}
				for !in.IsDelim(']') {
					var v33 Preference
					(v33).UnmarshalEasyJSON(in)
					out.Preferences = append(out.Preferences, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Preference, 0, 2)
					} else {
						out.Parameters = []Preference{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Preference
					(v34).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]string, 0, 4)
					} else {
						out.Photos = []string{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.Photos = append(out.Photos, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Premium":
			(out.Premium).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel23(out *jwriter.Writer, in Profile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profileId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ProfileId))
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"isMale\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMale))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.Int(int(in.Goal))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"birthday\":"
		out.RawString(prefix)
		out.Raw((in.Birthday).MarshalJSON())
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		if in.Interests == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Interests {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likedBy\":"
		out.RawString(prefix)
		if in.LikedBy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.LikedBy {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v39))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"preferences\":"
		out.RawString(prefix)
		if in.Preferences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v40, v41 := range in.Preferences {
				if v40 > 0 {
					out.RawByte(',')
				}
				(v41).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parameters\":"
		out.RawString(prefix)
		if in.Parameters == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Parameters {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Photos {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Premium\":"
		out.RawString(prefix)
		(in.Premium).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Profile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Profile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Profile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Profile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel23(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel24(in *jlexer.Lexer, out *Premium) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			out.Status = bool(in.Bool())
		case "Border":
			out.Border = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel24(out *jwriter.Writer, in Premium) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"Border\":"
		out.RawString(prefix)
		out.Int32(int32(in.Border))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Premium) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Premium) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Premium) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Premium) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel24(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel25(in *jlexer.Lexer, out *Preference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "preference_description":
			out.Description = string(in.String())
		case "preference_value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel25(out *jwriter.Writer, in Preference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"preference_description\":"
		out.RawString(prefix[1:])
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"preference_value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Preference) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Preference) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Preference) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Preference) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel25(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel26(in *jlexer.Lexer, out *NotificationSend) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notificationID":
			out.NotificationID = int(in.Int())
		case "read":
			out.Read = int(in.Int())
		case "type":
			out.NotifType = string(in.String())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel26(out *jwriter.Writer, in NotificationSend) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notificationID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NotificationID))
	}
	{
		const prefix string = ",\"read\":"
		out.RawString(prefix)
		out.Int(int(in.Read))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.NotifType))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NotificationSend) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NotificationSend) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NotificationSend) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NotificationSend) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel26(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel27(in *jlexer.Lexer, out *Notification) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "payload":
			if m, ok := out.Payload.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Payload.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Payload = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel27(out *jwriter.Writer, in Notification) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		if m, ok := in.Payload.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Payload.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Payload))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Notification) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Notification) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Notification) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Notification) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel27(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel28(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "messageid":
			out.MessageID = int(in.Int())
		case "senderid":
			out.SenderID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "createdAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel28(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"messageid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MessageID))
	}
	{
		const prefix string = ",\"senderid\":"
		out.RawString(prefix)
		out.Int(int(in.SenderID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"createdAt\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel28(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel29(in *jlexer.Lexer, out *LoginResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel29(out *jwriter.Writer, in LoginResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel29(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel30(in *jlexer.Lexer, out *LoginRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel30(out *jwriter.Writer, in LoginRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel30(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel31(in *jlexer.Lexer, out *HandleComplaint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complaint_id":
			out.Complaint_id = int(in.Int())
		case "new_status":
			out.NewStatus = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel31(out *jwriter.Writer, in HandleComplaint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complaint_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Complaint_id))
	}
	{
		const prefix string = ",\"new_status\":"
		out.RawString(prefix)
		out.Int(int(in.NewStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HandleComplaint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HandleComplaint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HandleComplaint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HandleComplaint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel31(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel32(in *jlexer.Lexer, out *GetAnswerStatistics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query_name":
			out.Query_name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel32(out *jwriter.Writer, in GetAnswerStatistics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query_name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetAnswerStatistics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetAnswerStatistics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetAnswerStatistics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetAnswerStatistics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel32(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel33(in *jlexer.Lexer, out *FoundProfileResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]FoundProfile, 0, 1)
					} else {
						out.Profiles = []FoundProfile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v46 FoundProfile
					(v46).UnmarshalEasyJSON(in)
					out.Profiles = append(out.Profiles, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel33(out *jwriter.Writer, in FoundProfileResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix[1:])
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Profiles {
				if v47 > 0 {
					out.RawByte(',')
				}
				(v48).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FoundProfileResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FoundProfileResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FoundProfileResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FoundProfileResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel33(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel34(in *jlexer.Lexer, out *FoundProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idUser":
			out.IDUser = int(in.Int())
		case "firstImgSrc":
			out.FirstImg = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "age":
			out.Age = int(in.Int())
		case "goal":
			out.Goal = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel34(out *jwriter.Writer, in FoundProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idUser\":"
		out.RawString(prefix[1:])
		out.Int(int(in.IDUser))
	}
	{
		const prefix string = ",\"firstImgSrc\":"
		out.RawString(prefix)
		out.String(string(in.FirstImg))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"age\":"
		out.RawString(prefix)
		out.Int(int(in.Age))
	}
	{
		const prefix string = ",\"goal\":"
		out.RawString(prefix)
		out.Int(int(in.Goal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FoundProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FoundProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FoundProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FoundProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel34(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel35(in *jlexer.Lexer, out *FlowersPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel35(out *jwriter.Writer, in FlowersPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FlowersPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FlowersPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FlowersPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FlowersPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel35(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel36(in *jlexer.Lexer, out *FindQueryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "query_id":
			out.Query_id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel36(out *jwriter.Writer, in FindQueryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"query_id\":"
		out.RawString(prefix)
		out.Int(int(in.Query_id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FindQueryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FindQueryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FindQueryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FindQueryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel36(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel37(in *jlexer.Lexer, out *FindComplaint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complaint_by":
			out.Complaint_by = int(in.Int())
		case "name_by":
			out.Name_by = string(in.String())
		case "complaint_on":
			out.Complaint_on = int(in.Int())
		case "name_on":
			out.Name_on = string(in.String())
		case "complaint_type":
			out.Complaint_type = string(in.String())
		case "status":
			out.Status = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel37(out *jwriter.Writer, in FindComplaint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complaint_by\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Complaint_by))
	}
	{
		const prefix string = ",\"name_by\":"
		out.RawString(prefix)
		out.String(string(in.Name_by))
	}
	{
		const prefix string = ",\"complaint_on\":"
		out.RawString(prefix)
		out.Int(int(in.Complaint_on))
	}
	{
		const prefix string = ",\"name_on\":"
		out.RawString(prefix)
		out.String(string(in.Name_on))
	}
	{
		const prefix string = ",\"complaint_type\":"
		out.RawString(prefix)
		out.String(string(in.Complaint_type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FindComplaint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FindComplaint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FindComplaint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FindComplaint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel37(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel38(in *jlexer.Lexer, out *ErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel38(out *jwriter.Writer, in ErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix[1:])
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel38(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel39(in *jlexer.Lexer, out *DeleteQueryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query_name":
			out.Query_name = string(in.String())
		case "user_id":
			out.User_id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel39(out *jwriter.Writer, in DeleteQueryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Query_name))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.User_id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteQueryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteQueryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteQueryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteQueryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel39(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel40(in *jlexer.Lexer, out *DeletePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = int(in.Int())
		case "message_id":
			out.MessageID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel40(out *jwriter.Writer, in DeletePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatID))
	}
	{
		const prefix string = ",\"message_id\":"
		out.RawString(prefix)
		out.Int(int(in.MessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeletePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeletePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeletePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeletePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel40(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel41(in *jlexer.Lexer, out *DeleteNotifPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notif_id":
			out.NotifID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel41(out *jwriter.Writer, in DeleteNotifPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notif_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NotifID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteNotifPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteNotifPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteNotifPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteNotifPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel41(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel42(in *jlexer.Lexer, out *DeleteComlaint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complaint_id":
			out.Complaint_id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel42(out *jwriter.Writer, in DeleteComlaint) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complaint_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Complaint_id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteComlaint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteComlaint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteComlaint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteComlaint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel42(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel43(in *jlexer.Lexer, out *DeleteChatRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstID":
			out.FristID = int(in.Int())
		case "secondID":
			out.SecondID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel43(out *jwriter.Writer, in DeleteChatRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FristID))
	}
	{
		const prefix string = ",\"secondID\":"
		out.RawString(prefix)
		out.Int(int(in.SecondID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteChatRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteChatRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteChatRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteChatRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel43(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel44(in *jlexer.Lexer, out *CreatePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "content":
			out.Content = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel44(out *jwriter.Writer, in CreatePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		out.String(string(in.Content))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreatePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreatePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreatePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreatePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel44(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel45(in *jlexer.Lexer, out *CreateComplaintRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstID":
			out.Complaint_type = string(in.String())
		case "complaint_text":
			out.Complaint_text = string(in.String())
		case "complaint_on":
			out.Complaint_on = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel45(out *jwriter.Writer, in CreateComplaintRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstID\":"
		out.RawString(prefix[1:])
		out.String(string(in.Complaint_type))
	}
	{
		const prefix string = ",\"complaint_text\":"
		out.RawString(prefix)
		out.String(string(in.Complaint_text))
	}
	{
		const prefix string = ",\"complaint_on\":"
		out.RawString(prefix)
		out.String(string(in.Complaint_on))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateComplaintRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateComplaintRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateComplaintRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateComplaintRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel45(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel46(in *jlexer.Lexer, out *CreateChatRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstID":
			out.FristID = int(in.Int())
		case "secondID":
			out.SecondID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel46(out *jwriter.Writer, in CreateChatRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstID\":"
		out.RawString(prefix[1:])
		out.Int(int(in.FristID))
	}
	{
		const prefix string = ",\"secondID\":"
		out.RawString(prefix)
		out.Int(int(in.SecondID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateChatRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateChatRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateChatRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateChatRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel46(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel47(in *jlexer.Lexer, out *Cookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "expires":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Expires).UnmarshalJSON(data))
			}
		case "httpOnly":
			out.HttpOnly = bool(in.Bool())
		case "secure":
			out.Secure = bool(in.Bool())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel47(out *jwriter.Writer, in Cookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"expires\":"
		out.RawString(prefix)
		out.Raw((in.Expires).MarshalJSON())
	}
	{
		const prefix string = ",\"httpOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.HttpOnly))
	}
	{
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Bool(bool(in.Secure))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cookie) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cookie) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cookie) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cookie) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel47(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel48(in *jlexer.Lexer, out *ComplaintsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complaints":
			if in.IsNull() {
				in.Skip()
				out.Complaints = nil
			} else {
				in.Delim('[')
				if out.Complaints == nil {
					if !in.IsDelim(']') {
						out.Complaints = make([]ComplaintWithLogins, 0, 0)
					} else {
						out.Complaints = []ComplaintWithLogins{}
					}
				} else {
					out.Complaints = (out.Complaints)[:0]
				}
				for !in.IsDelim(']') {
					var v49 ComplaintWithLogins
					(v49).UnmarshalEasyJSON(in)
					out.Complaints = append(out.Complaints, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel48(out *jwriter.Writer, in ComplaintsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complaints\":"
		out.RawString(prefix[1:])
		if in.Complaints == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.Complaints {
				if v50 > 0 {
					out.RawByte(',')
				}
				(v51).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplaintsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplaintsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplaintsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplaintsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel48(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel49(in *jlexer.Lexer, out *ComplaintWithLogins) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "complaint_id":
			out.ComplaintID = int64(in.Int64())
		case "complaint_by":
			out.ComplaintBy = string(in.String())
		case "complaint_on":
			out.ComplaintOn = string(in.String())
		case "complaint_type":
			out.ComplaintType = int64(in.Int64())
		case "type_description":
			out.TypeDesc = string(in.String())
		case "complaint_text":
			out.Text = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "closed_at":
			if in.IsNull() {
				in.Skip()
				out.ClosedAt = nil
			} else {
				if out.ClosedAt == nil {
					out.ClosedAt = new(time.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ClosedAt).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel49(out *jwriter.Writer, in ComplaintWithLogins) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"complaint_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ComplaintID))
	}
	{
		const prefix string = ",\"complaint_by\":"
		out.RawString(prefix)
		out.String(string(in.ComplaintBy))
	}
	{
		const prefix string = ",\"complaint_on\":"
		out.RawString(prefix)
		out.String(string(in.ComplaintOn))
	}
	{
		const prefix string = ",\"complaint_type\":"
		out.RawString(prefix)
		out.Int64(int64(in.ComplaintType))
	}
	{
		const prefix string = ",\"type_description\":"
		out.RawString(prefix)
		out.String(string(in.TypeDesc))
	}
	{
		const prefix string = ",\"complaint_text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"closed_at\":"
		out.RawString(prefix)
		if in.ClosedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ClosedAt).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplaintWithLogins) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplaintWithLogins) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplaintWithLogins) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplaintWithLogins) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel49(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel50(in *jlexer.Lexer, out *ComplaintStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total_complaints":
			out.Total = int(in.Int())
		case "rejected":
			out.Rejected = int(in.Int())
		case "pending":
			out.Pending = int(in.Int())
		case "approved":
			out.Approved = int(in.Int())
		case "closed":
			out.Closed = int(in.Int())
		case "total_complainants":
			out.TotalBy = int(in.Int())
		case "total_reported":
			out.TotalOn = int(in.Int())
		case "first_complaint":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FirstComplaint).UnmarshalJSON(data))
			}
		case "last_complaint":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastComplaint).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel50(out *jwriter.Writer, in ComplaintStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total_complaints\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"rejected\":"
		out.RawString(prefix)
		out.Int(int(in.Rejected))
	}
	{
		const prefix string = ",\"pending\":"
		out.RawString(prefix)
		out.Int(int(in.Pending))
	}
	{
		const prefix string = ",\"approved\":"
		out.RawString(prefix)
		out.Int(int(in.Approved))
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Int(int(in.Closed))
	}
	{
		const prefix string = ",\"total_complainants\":"
		out.RawString(prefix)
		out.Int(int(in.TotalBy))
	}
	{
		const prefix string = ",\"total_reported\":"
		out.RawString(prefix)
		out.Int(int(in.TotalOn))
	}
	{
		const prefix string = ",\"first_complaint\":"
		out.RawString(prefix)
		out.Raw((in.FirstComplaint).MarshalJSON())
	}
	{
		const prefix string = ",\"last_complaint\":"
		out.RawString(prefix)
		out.Raw((in.LastComplaint).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ComplaintStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ComplaintStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ComplaintStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ComplaintStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel50(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel51(in *jlexer.Lexer, out *ChatsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chats":
			if in.IsNull() {
				in.Skip()
				out.Chats = nil
			} else {
				in.Delim('[')
				if out.Chats == nil {
					if !in.IsDelim(']') {
						out.Chats = make([]Chat, 0, 0)
					} else {
						out.Chats = []Chat{}
					}
				} else {
					out.Chats = (out.Chats)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Chat
					(v52).UnmarshalEasyJSON(in)
					out.Chats = append(out.Chats, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel51(out *jwriter.Writer, in ChatsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chats\":"
		out.RawString(prefix[1:])
		if in.Chats == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v53, v54 := range in.Chats {
				if v53 > 0 {
					out.RawByte(',')
				}
				(v54).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel51(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel52(in *jlexer.Lexer, out *ChatNotificationsPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			out.ChatID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel52(out *jwriter.Writer, in ChatNotificationsPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chat_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ChatID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatNotificationsPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatNotificationsPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatNotificationsPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatNotificationsPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel52(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel53(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "profileId":
			out.ProfileId = int(in.Int())
		case "chatId":
			out.ChatId = int(in.Int())
		case "profileName":
			out.ProfileName = string(in.String())
		case "profilePicture":
			out.ProfilePicture = string(in.String())
		case "profileDescription":
			out.ProfileDescription = string(in.String())
		case "lastMessage":
			out.LastMessage = string(in.String())
		case "isRead":
			out.IsRead = bool(in.Bool())
		case "isSelf":
			out.IsSelf = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel53(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"profileId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ProfileId))
	}
	{
		const prefix string = ",\"chatId\":"
		out.RawString(prefix)
		out.Int(int(in.ChatId))
	}
	{
		const prefix string = ",\"profileName\":"
		out.RawString(prefix)
		out.String(string(in.ProfileName))
	}
	{
		const prefix string = ",\"profilePicture\":"
		out.RawString(prefix)
		out.String(string(in.ProfilePicture))
	}
	{
		const prefix string = ",\"profileDescription\":"
		out.RawString(prefix)
		out.String(string(in.ProfileDescription))
	}
	{
		const prefix string = ",\"lastMessage\":"
		out.RawString(prefix)
		out.String(string(in.LastMessage))
	}
	{
		const prefix string = ",\"isRead\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsRead))
	}
	{
		const prefix string = ",\"isSelf\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsSelf))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel53(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel54(in *jlexer.Lexer, out *ChangeBorderRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "new_border":
			out.NewBorder = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel54(out *jwriter.Writer, in ChangeBorderRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"new_border\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NewBorder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangeBorderRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangeBorderRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangeBorderRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangeBorderRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel54(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel55(in *jlexer.Lexer, out *AnswersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]UsersForQuery, 0, 0)
					} else {
						out.Answers = []UsersForQuery{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v55 UsersForQuery
					(v55).UnmarshalEasyJSON(in)
					out.Answers = append(out.Answers, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel55(out *jwriter.Writer, in AnswersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix[1:])
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.Answers {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel55(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel56(in *jlexer.Lexer, out *AnswersForResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "answers":
			if in.IsNull() {
				in.Skip()
				out.Answers = nil
			} else {
				in.Delim('[')
				if out.Answers == nil {
					if !in.IsDelim(']') {
						out.Answers = make([]AnswersForQuery, 0, 0)
					} else {
						out.Answers = []AnswersForQuery{}
					}
				} else {
					out.Answers = (out.Answers)[:0]
				}
				for !in.IsDelim(']') {
					var v58 AnswersForQuery
					(v58).UnmarshalEasyJSON(in)
					out.Answers = append(out.Answers, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel56(out *jwriter.Writer, in AnswersForResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"answers\":"
		out.RawString(prefix[1:])
		if in.Answers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.Answers {
				if v59 > 0 {
					out.RawByte(',')
				}
				(v60).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswersForResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswersForResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswersForResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswersForResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel56(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel57(in *jlexer.Lexer, out *AnswersForQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "minScore":
			out.MinScore = int(in.Int())
		case "maxScore":
			out.MaxScore = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "answer":
			out.Answer = string(in.String())
		case "score":
			out.Score = int(in.Int())
		case "userId":
			out.UserId = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel57(out *jwriter.Writer, in AnswersForQuery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"minScore\":"
		out.RawString(prefix)
		out.Int(int(in.MinScore))
	}
	{
		const prefix string = ",\"maxScore\":"
		out.RawString(prefix)
		out.Int(int(in.MaxScore))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.String(string(in.Answer))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix)
		out.Int(int(in.UserId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswersForQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswersForQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswersForQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswersForQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel57(l, v)
}
func easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel58(in *jlexer.Lexer, out *AddSubRequet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel58(out *jwriter.Writer, in AddSubRequet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"label\":"
		out.RawString(prefix[1:])
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddSubRequet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddSubRequet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComGoParkMailRu20251ProVVebModel58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddSubRequet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddSubRequet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComGoParkMailRu20251ProVVebModel58(l, v)
}
