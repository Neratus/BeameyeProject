name: Up Beameye Service
run-name: ${{ github.actor }} is deploying Beameye Service
on:
  push:
    branches: [ main, dev, ci ]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run tests
      run: |
        # if [ "${{ github.ref }}" == "refs/heads/ci" || "${{ github.ref }}" == "refs/heads/dev" ]; then
        #   echo "TESTING"
        # else
        #   make test
        # fi       
        echo "TESTING"
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run linter
      if: github.ref != 'refs/heads/ci' && github.ref != 'refs/heads/dev'
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.1
    - name: Mock linter for CI
      if: github.ref == 'refs/heads/ci' || github.ref == 'refs/heads/dev'
      run: echo "LINTerING"
  build:
    needs: [ test, lint ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: [ "auth_micro", "profiles_micro", "query_micro", "users_micro" ]
    steps:
    - uses: actions/checkout@v4
    - name: login to docker hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: build and push ${{ matrix.image }}
      run: |
        docker build -t forus809/${{ matrix.image }}:latest -f ./${{ matrix.image }}/Dockerfile .
        docker push forus809/${{ matrix.image }}:latest

  build-db-and-backend:
    needs: [ test, lint ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: login to docker hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: build and push backend
      run: |
        docker build -t forus809/beameye:latest -f ./Dockerfile .
        docker push forus809/beameye:latest
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: [ build, build-db-and-backend ]
    steps:
    - name: Setup SSH key
      run: |
        # Создаём директорию .ssh
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh

        echo "${{ secrets.PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key

        ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: Deploy our beautiful app
      run: |
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ./beameye
          touch successful-ssh.txt
          echo "-------------------" > successful-ssh.txt
          mkdir -p nginx
          mkdir -p nginx/conf.d
          cd backend
          git pull >> ../successful-ssh.txt
          cd ..
          cp backend/docker-compose.yml docker-compose.yml
          cp backend/nginx/conf.d/app.conf nginx/conf.d/app.conf
          echo "cp backend/docker-compose.yml docker-compose.yml" >> successful-ssh.txt
          echo "sudo docker-compose down" >> successful-ssh.txt
          echo "sudo docker-compose up -d --build" >> successful-ssh.txt
          sudo docker-compose down
          sudo docker-compose up -d --build
        EOF
